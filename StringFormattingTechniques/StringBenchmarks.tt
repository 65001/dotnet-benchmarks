<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated from the "MultipleReturnsIntBenchmarks.tt" T4 Text Template.
// </auto-generated>
//------------------------------------------------------------------------------
<# int maxsize = 7; #>

using BenchmarkDotNet.Attributes;

namespace StringFormattingTechniques
{
	public class StringBenchmarks
	{
<# for (int i = 1; i <= maxsize; i++) { #>

		[Benchmark]
		public void AddOperator<#= i #>()
		{
<# for (int j = 0; j < i; j++) { #>
			int _<#= j + 1 #> = <#= j + 1 #>;
<# } #>
			_ = " " + <#= string.Join(@" + "" "" + ", Enumerable.Range(1, i).Select(j => $@"_{j}")) #> + " ";
		}

		[Benchmark]
		public void Format<#= i #>()
		{
<# for (int j = 0; j < i; j++) { #>
			int _<#= j + 1 #> = <#= j + 1 #>;
<# } #>
			_ = string.Format(" <#= string.Join(" ", Enumerable.Range(0, i).Select(j => $"{{{j}}}")) #> ", <#= string.Join(", ", Enumerable.Range(1, i).Select(j => $"_{j}")) #>);
		}

		[Benchmark]
		public void Interpolation<#= i #>()
		{
<# for (int j = 0; j < i; j++) { #>
			int _<#= j + 1 #> = <#= j + 1 #>;
<# } #>
			_ = $" <#= string.Join(@" ", Enumerable.Range(1, i).Select(j => $@"{{_{j}}}")) #> ";
		}
<# } #>
	}
}
