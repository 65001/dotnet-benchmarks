<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated from the "MultipleReturnsIntBenchmarks.tt" T4 Text Template.
// </auto-generated>
//------------------------------------------------------------------------------
<# int[] sizes = { 1, 2, 3, 4, 5, 10, 100, 1000 }; #>

using BenchmarkDotNet.Attributes;
using System.Runtime.CompilerServices;
using System.Text;

namespace StringFormattingTechniques
{
	public class StringBenchmarks
	{
<# foreach (int i in sizes) { #>

		[Benchmark]
		[MethodImpl(MethodImplOptions.NoOptimization | MethodImplOptions.NoInlining)]
		public void AddOperator<#= i #>()
		{
<# for (int j = 0; j < i; j++) { #>
			int _<#= j + 1 #> = <#= j + 1 #>;
<# } #>
			_ = " " + <#= string.Join(@" + "" "" + ", Enumerable.Range(1, i).Select(j => $@"_{j}")) #> + " ";
		}

		[Benchmark]
		[MethodImpl(MethodImplOptions.NoOptimization | MethodImplOptions.NoInlining)]
		public void Format<#= i #>()
		{
<# for (int j = 0; j < i; j++) { #>
			int _<#= j + 1 #> = <#= j + 1 #>;
<# } #>
			_ = string.Format(" <#= string.Join(" ", Enumerable.Range(0, i).Select(j => $"{{{j}}}")) #> ", <#= string.Join(", ", Enumerable.Range(1, i).Select(j => $"_{j}")) #>);
		}

		[Benchmark]
		[MethodImpl(MethodImplOptions.NoOptimization | MethodImplOptions.NoInlining)]
		public void Interpolation<#= i #>()
		{
<# for (int j = 0; j < i; j++) { #>
			int _<#= j + 1 #> = <#= j + 1 #>;
<# } #>
			_ = $" <#= string.Join(@" ", Enumerable.Range(1, i).Select(j => $@"{{_{j}}}")) #> ";
		}

		[Benchmark]
		[MethodImpl(MethodImplOptions.NoOptimization | MethodImplOptions.NoInlining)]
		public void StringBuilder<#= i #>()
		{
<# for (int j = 0; j < i; j++) { #>
			int _<#= j + 1 #> = <#= j + 1 #>;
<# } #>
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.Append(_1);
<# for (int j = 1; j < i; j++) { #>
			stringBuilder.Append(" ");
			stringBuilder.Append(_<#= j + 1 #>);
<# } #>
			_ = stringBuilder.ToString();
		}
		
		[Benchmark]
		[MethodImpl(MethodImplOptions.NoOptimization | MethodImplOptions.NoInlining)]
		public void StringConcat<#= i #>()
		{
<# for (int j = 0; j < i; j++) { #>
			int _<#= j + 1 #> = <#= j + 1 #>;
<# } #>
			_ = string.Concat(" ", <#= string.Join(@", "" "", ", Enumerable.Range(1, i).Select(j => $@"_{j}")) #>, " ");
		}

		[Benchmark]
		[MethodImpl(MethodImplOptions.NoOptimization | MethodImplOptions.NoInlining)]
		public void AddEqualOperator<#= i #>()
		{
<# for (int j = 0; j < i; j++) { #>
			int _<#= j + 1 #> = <#= j + 1 #>;
<# } #>
			string result = string.Empty;
			result += _1;
<# for (int j = 1; j < i; j++) { #>
			result += " ";
			result += _<#= j + 1 #>;
<# } #>
			_ = result.ToString();
		}
<# } #>
	}
}
