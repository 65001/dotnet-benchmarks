<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated from the "BranchingTechniques.tt" T4 Text Template.
// </auto-generated>
//------------------------------------------------------------------------------
<# int[] sizes = { 1, 2, 3, 4, 5, 10, 100, 1000 }; #>

using BenchmarkDotNet.Attributes;

namespace BranchingTechniques
{
	public class BranchingTechniquesBenchmarks
	{
		int temp = default;
<# foreach (int i in sizes) { #>

		[Benchmark]
		public void switchStatement<#= i #>()
		{
			for (int i = 0; i < <#= i #>; i++)
			{
				switch (i)
				{
<# for (int j = 0; j < i; j++) { #>
					case <#= j #>: temp = i; break;
<# } #>
				}
			}
		}

		[Benchmark]
		public void switchExpression<#= i #>()
		{
			for (int i = 0; i < <#= i #>; i++)
			{
				temp = i switch
				{
<# for (int j = 0; j < i; j++) { #>
					<#= j #> => i,
<# } #>
				};
			}
		}

		[Benchmark]
		public void if<#= i #>()
		{
			for (int i = 0; i < <#= i #>; i++)
			{
<# for (int j = 0; j < i; j++) { #>
				<#= i == 0 ? "else " : "" #>if (i == <#= j #>) temp = i;
<# } #>
			}
		}

		[Benchmark]
		public void conditional<#= i #>()
		{
<# if (i <= 100) { #>
			for (int i = 0; i < <#= i #>; i++)
			{
				temp =
<# for (int j = 0; j < i; j++) { #>
					i == <#= j #> ? i :
<# } #>
					default;
			}
<# } #>
<# else { #>
			throw new System.Exception("too large; throws exception on build");
<# } #>
		}
<# } #>
	}
}
